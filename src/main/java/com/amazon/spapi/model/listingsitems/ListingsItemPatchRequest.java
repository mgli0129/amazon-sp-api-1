/*
 * Selling Partner API for Listings Items
 * The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listing Items API Use Case Guide](https://github.com/amzn/selling-partner-api-docs/blob/main/guides/en-US/use-case-guides/listings-items-api-use-case-guide/listings-items-api-use-case-guide_2020-09-01.md).
 *
 * OpenAPI spec version: 2020-09-01
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.amazon.spapi.model.listingsitems;

import java.util.Objects;
import java.util.Arrays;
import com.amazon.spapi.model.listingsitems.PatchOperation;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * The request body schema for the patchListingsItem operation.
 */
@Schema(description = "The request body schema for the patchListingsItem operation.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-08-18T11:31:46.310021+08:00[Asia/Shanghai]")
public class ListingsItemPatchRequest {
  @SerializedName("productType")
  private String productType = null;

  @SerializedName("patches")
  private List<PatchOperation> patches = new ArrayList<PatchOperation>();

  public ListingsItemPatchRequest productType(String productType) {
    this.productType = productType;
    return this;
  }

   /**
   * The Amazon product type of the listings item.
   * @return productType
  **/
  @Schema(required = true, description = "The Amazon product type of the listings item.")
  public String getProductType() {
    return productType;
  }

  public void setProductType(String productType) {
    this.productType = productType;
  }

  public ListingsItemPatchRequest patches(List<PatchOperation> patches) {
    this.patches = patches;
    return this;
  }

  public ListingsItemPatchRequest addPatchesItem(PatchOperation patchesItem) {
    this.patches.add(patchesItem);
    return this;
  }

   /**
   * One or more JSON Patch operations to perform on the listings item.
   * @return patches
  **/
  @Schema(required = true, description = "One or more JSON Patch operations to perform on the listings item.")
  public List<PatchOperation> getPatches() {
    return patches;
  }

  public void setPatches(List<PatchOperation> patches) {
    this.patches = patches;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListingsItemPatchRequest listingsItemPatchRequest = (ListingsItemPatchRequest) o;
    return Objects.equals(this.productType, listingsItemPatchRequest.productType) &&
        Objects.equals(this.patches, listingsItemPatchRequest.patches);
  }

  @Override
  public int hashCode() {
    return Objects.hash(productType, patches);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListingsItemPatchRequest {\n");
    
    sb.append("    productType: ").append(toIndentedString(productType)).append("\n");
    sb.append("    patches: ").append(toIndentedString(patches)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
