/*
 * Selling Partner API for Direct Fulfillment Shipping
 * The Selling Partner API for Direct Fulfillment Shipping provides programmatic access to a direct fulfillment vendor's shipping data.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.amazon.spapi.models.vendordirectfulfillmentshipping;

import java.util.Objects;
import java.util.Arrays;
import com.amazon.spapi.models.vendordirectfulfillmentshipping.Dimensions;
import com.amazon.spapi.models.vendordirectfulfillmentshipping.Weight;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * Details of the package being shipped.
 */
@Schema(description = "Details of the package being shipped.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-08-19T18:32:26.407858+08:00[Asia/Shanghai]")
public class ModelPackage {
  @SerializedName("packageIdentifier")
  private String packageIdentifier = null;

  @SerializedName("trackingNumber")
  private String trackingNumber = null;

  @SerializedName("manifestId")
  private String manifestId = null;

  @SerializedName("manifestDate")
  private OffsetDateTime manifestDate = null;

  @SerializedName("shipMethod")
  private String shipMethod = null;

  @SerializedName("weight")
  private Weight weight = null;

  @SerializedName("dimensions")
  private Dimensions dimensions = null;

  public ModelPackage packageIdentifier(String packageIdentifier) {
    this.packageIdentifier = packageIdentifier;
    return this;
  }

   /**
   * Package identifier for the package. The first package will be 001, the second 002, and so on. This number is used as a reference to refer to this package from the pallet level.
   * @return packageIdentifier
  **/
  @Schema(required = true, description = "Package identifier for the package. The first package will be 001, the second 002, and so on. This number is used as a reference to refer to this package from the pallet level.")
  public String getPackageIdentifier() {
    return packageIdentifier;
  }

  public void setPackageIdentifier(String packageIdentifier) {
    this.packageIdentifier = packageIdentifier;
  }

  public ModelPackage trackingNumber(String trackingNumber) {
    this.trackingNumber = trackingNumber;
    return this;
  }

   /**
   * This is required to be provided for every package in the small parcel shipments.
   * @return trackingNumber
  **/
  @Schema(description = "This is required to be provided for every package in the small parcel shipments.")
  public String getTrackingNumber() {
    return trackingNumber;
  }

  public void setTrackingNumber(String trackingNumber) {
    this.trackingNumber = trackingNumber;
  }

  public ModelPackage manifestId(String manifestId) {
    this.manifestId = manifestId;
    return this;
  }

   /**
   * Carrier manifest Id (Applicable for LTL shipments).
   * @return manifestId
  **/
  @Schema(description = "Carrier manifest Id (Applicable for LTL shipments).")
  public String getManifestId() {
    return manifestId;
  }

  public void setManifestId(String manifestId) {
    this.manifestId = manifestId;
  }

  public ModelPackage manifestDate(OffsetDateTime manifestDate) {
    this.manifestDate = manifestDate;
    return this;
  }

   /**
   * Carrier manifest Date (Applicable for LTL shipments).
   * @return manifestDate
  **/
  @Schema(description = "Carrier manifest Date (Applicable for LTL shipments).")
  public OffsetDateTime getManifestDate() {
    return manifestDate;
  }

  public void setManifestDate(OffsetDateTime manifestDate) {
    this.manifestDate = manifestDate;
  }

  public ModelPackage shipMethod(String shipMethod) {
    this.shipMethod = shipMethod;
    return this;
  }

   /**
   * Shipment method.
   * @return shipMethod
  **/
  @Schema(description = "Shipment method.")
  public String getShipMethod() {
    return shipMethod;
  }

  public void setShipMethod(String shipMethod) {
    this.shipMethod = shipMethod;
  }

  public ModelPackage weight(Weight weight) {
    this.weight = weight;
    return this;
  }

   /**
   * Get weight
   * @return weight
  **/
  @Schema(required = true, description = "")
  public Weight getWeight() {
    return weight;
  }

  public void setWeight(Weight weight) {
    this.weight = weight;
  }

  public ModelPackage dimensions(Dimensions dimensions) {
    this.dimensions = dimensions;
    return this;
  }

   /**
   * Get dimensions
   * @return dimensions
  **/
  @Schema(description = "")
  public Dimensions getDimensions() {
    return dimensions;
  }

  public void setDimensions(Dimensions dimensions) {
    this.dimensions = dimensions;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelPackage _package = (ModelPackage) o;
    return Objects.equals(this.packageIdentifier, _package.packageIdentifier) &&
        Objects.equals(this.trackingNumber, _package.trackingNumber) &&
        Objects.equals(this.manifestId, _package.manifestId) &&
        Objects.equals(this.manifestDate, _package.manifestDate) &&
        Objects.equals(this.shipMethod, _package.shipMethod) &&
        Objects.equals(this.weight, _package.weight) &&
        Objects.equals(this.dimensions, _package.dimensions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(packageIdentifier, trackingNumber, manifestId, manifestDate, shipMethod, weight, dimensions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelPackage {\n");

    sb.append("    packageIdentifier: ").append(toIndentedString(packageIdentifier)).append("\n");
    sb.append("    trackingNumber: ").append(toIndentedString(trackingNumber)).append("\n");
    sb.append("    manifestId: ").append(toIndentedString(manifestId)).append("\n");
    sb.append("    manifestDate: ").append(toIndentedString(manifestDate)).append("\n");
    sb.append("    shipMethod: ").append(toIndentedString(shipMethod)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
